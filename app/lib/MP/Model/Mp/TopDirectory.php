<?php
//Don't edit this file which is generated by Bluefin Lance.
//You can put custom business logic into a Business class under MP\Business namespace.
namespace MP\Model\Mp;

use Bluefin\App;
use Bluefin\Convention;
use Bluefin\VarText;
use Bluefin\Data\Type;
use Bluefin\Data\Model;
use Bluefin\Data\Database;
use Bluefin\Data\ModelMetadata;
use Bluefin\Data\DbExpr;

class TopDirectory extends Model
{
    const TOP_DIRECTORY_ID = 'top_directory_id';
    const _CREATED_AT = '_created_at';
    const MP_USER_ID = 'mp_user_id';
    const COMMUNITY_ID = 'community_id';
    const TITLE = 'title';
    const TOP_DIR_NO = 'top_dir_no';
    const DIRECTORY_BACKGROUND_IMG = 'directory_background_img';
    const DIRECTORY_TOP_IMG = 'directory_top_img';
    const DIRECTORY_TOP_IMG_SECOND = 'directory_top_img_second';
    const DIRECTORY_TOP_IMG_THIRD = 'directory_top_img_third';
    const URL_TYPE = 'url_type';
    const POWER_TYPE = 'power_type';



    protected static $__metadata;

    /**
     * @static
     * @return \Bluefin\Data\ModelMetadata
     */
    public static function s_metadata()
    {
        if (!isset(self::$__metadata))
        {
            self::$__metadata = new ModelMetadata(
                'mp',
                'top_directory',
                'top_directory_id',
                [
                    'top_directory_id' => ['name' => _META_('mp.top_directory.top_directory_id'), 'type' => 'int', 'length' => 10, 'min' => 1, 'required' => true, 'db_insert' => true, 'rou' => true],
                    '_created_at' => ['name' => _META_('mp.top_directory._created_at'), 'type' => 'timestamp', 'required' => true, 'default' => new DbExpr('NOW()'), 'roc' => true, 'rou' => true],
                    'mp_user_id' => ['name' => _META_('mp.top_directory.mp_user_id'), 'type' => 'int', 'length' => 10, 'required' => true],
                    'community_id' => ['name' => _META_('mp.top_directory.community_id'), 'type' => 'int', 'length' => 10, 'required' => true],
                    'title' => ['name' => _META_('mp.top_directory.title'), 'type' => 'text', 'length' => 64, 'required' => true],
                    'top_dir_no' => ['name' => _META_('mp.top_directory.top_dir_no'), 'type' => 'int', 'length' => 10, 'required' => true],
                    'directory_background_img' => ['name' => _META_('mp.top_directory.directory_background_img'), 'type' => 'url'],
                    'directory_top_img' => ['name' => _META_('mp.top_directory.directory_top_img'), 'type' => 'url'],
                    'directory_top_img_second' => ['name' => _META_('mp.top_directory.directory_top_img_second'), 'type' => 'url'],
                    'directory_top_img_third' => ['name' => _META_('mp.top_directory.directory_top_img_third'), 'type' => 'url'],
                    'url_type' => ['name' => _META_('mp.top_directory.url_type'), 'type' => 'text', 'max' => 32, 'db_insert' => true, 'enum' => new TopUrlType()],
                    'power_type' => ['name' => _META_('mp.top_directory.power_type'), 'type' => 'text', 'max' => 32, 'enum' => new DirectoryPowerType(), 'db_insert' => true],
                ],
                [
                    'auto_increment_id' => 'top_directory_id',
                    'create_timestamp' => '_created_at',
                    'unique_keys' => [['community_id', 'top_dir_no']],
                ],
                [
                ],
                [
                ],
                [
                    Model::OP_CREATE => NULL,
                    Model::OP_GET => NULL,
                    Model::OP_UPDATE => NULL,
                    Model::OP_DELETE => NULL,
                ]
            );
        }

        return self::$__metadata;
    }

    public function __construct($condition = null)
    {
        parent::__construct(self::s_metadata());

        if (isset($condition))
        {
            $this->load($condition);
        }
        else
        {
            $this->reset();
        }
    }

    /**
     * Gets id
     * @return int
     */
    public function getTopDirectoryID()
    {
        return $this->__get(self::TOP_DIRECTORY_ID);
    }

    /**
     * Sets id
     * @param int $value
     * @return TopDirectory
     */
    public function setTopDirectoryID($value)
    {
        $this->__set(self::TOP_DIRECTORY_ID, $value);

        return $this;
    }

    /**
     * Gets createdat
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->__get(self::_CREATED_AT);
    }

    /**
     * Sets createdat
     * @param string $value
     * @return TopDirectory
     */
    public function setCreatedAt($value)
    {
        $this->__set(self::_CREATED_AT, $value);

        return $this;
    }

    /**
     * Gets 公众账号id
     * @return int
     */
    public function getMpUserID()
    {
        return $this->__get(self::MP_USER_ID);
    }

    /**
     * Sets 公众账号id
     * @param int $value
     * @return TopDirectory
     */
    public function setMpUserID($value)
    {
        $this->__set(self::MP_USER_ID, $value);

        return $this;
    }

    /**
     * Gets community.community_id
     * @return int
     */
    public function getCommunityID()
    {
        return $this->__get(self::COMMUNITY_ID);
    }

    /**
     * Sets community.community_id
     * @param int $value
     * @return TopDirectory
     */
    public function setCommunityID($value)
    {
        $this->__set(self::COMMUNITY_ID, $value);

        return $this;
    }

    /**
     * Gets 名称
     * @return string
     */
    public function getTitle()
    {
        return $this->__get(self::TITLE);
    }

    /**
     * Sets 名称
     * @param string $value
     * @return TopDirectory
     */
    public function setTitle($value)
    {
        $this->__set(self::TITLE, $value);

        return $this;
    }

    /**
     * Gets 一级目录编号
     * @return int
     */
    public function getTopDirNo()
    {
        return $this->__get(self::TOP_DIR_NO);
    }

    /**
     * Sets 一级目录编号
     * @param int $value
     * @return TopDirectory
     */
    public function setTopDirNo($value)
    {
        $this->__set(self::TOP_DIR_NO, $value);

        return $this;
    }

    /**
     * Gets 目录背景图片地址
     * @return string
     */
    public function getDirectoryBackgroundImg()
    {
        return $this->__get(self::DIRECTORY_BACKGROUND_IMG);
    }

    /**
     * Sets 目录背景图片地址
     * @param string $value
     * @return TopDirectory
     */
    public function setDirectoryBackgroundImg($value)
    {
        $this->__set(self::DIRECTORY_BACKGROUND_IMG, $value);

        return $this;
    }

    /**
     * Gets 目录顶部图片地址一
     * @return string
     */
    public function getDirectoryTopImg()
    {
        return $this->__get(self::DIRECTORY_TOP_IMG);
    }

    /**
     * Sets 目录顶部图片地址一
     * @param string $value
     * @return TopDirectory
     */
    public function setDirectoryTopImg($value)
    {
        $this->__set(self::DIRECTORY_TOP_IMG, $value);

        return $this;
    }

    /**
     * Gets 目录顶部图片地址二
     * @return string
     */
    public function getDirectoryTopImgSecond()
    {
        return $this->__get(self::DIRECTORY_TOP_IMG_SECOND);
    }

    /**
     * Sets 目录顶部图片地址二
     * @param string $value
     * @return TopDirectory
     */
    public function setDirectoryTopImgSecond($value)
    {
        $this->__set(self::DIRECTORY_TOP_IMG_SECOND, $value);

        return $this;
    }

    /**
     * Gets 目录顶部图片地址三
     * @return string
     */
    public function getDirectoryTopImgThird()
    {
        return $this->__get(self::DIRECTORY_TOP_IMG_THIRD);
    }

    /**
     * Sets 目录顶部图片地址三
     * @param string $value
     * @return TopDirectory
     */
    public function setDirectoryTopImgThird($value)
    {
        $this->__set(self::DIRECTORY_TOP_IMG_THIRD, $value);

        return $this;
    }

    /**
     * Gets 目录链接类型
     * @return string
     */
    public function getUrlType()
    {
        return $this->__get(self::URL_TYPE);
    }

    /**
     * Gets 目录链接类型 display name
     * @return string
     */
    public function getUrlType_EnumValue()
    {
        $option = $this->metadata()->getFilterOption('url_type');
        return $option['enum']::getDisplayName($this->__get(self::URL_TYPE));
    }

    /**
     * Sets 目录链接类型
     * @param string $value
     * @return TopDirectory
     */
    public function setUrlType($value)
    {
        $this->__set(self::URL_TYPE, $value);

        return $this;
    }

    /**
     * Gets  目录权限判断
     * @return string
     */
    public function getPowerType()
    {
        return $this->__get(self::POWER_TYPE);
    }

    /**
     * Gets  目录权限判断 display name
     * @return string
     */
    public function getPowerType_EnumValue()
    {
        $option = $this->metadata()->getFilterOption('power_type');
        return $option['enum']::getDisplayName($this->__get(self::POWER_TYPE));
    }

    /**
     * Sets  目录权限判断
     * @param string $value
     * @return TopDirectory
     */
    public function setPowerType($value)
    {
        $this->__set(self::POWER_TYPE, $value);

        return $this;
    }
}
?>