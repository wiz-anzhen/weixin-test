<?php
//Don't edit this file which is generated by Bluefin Lance.
//You can put custom business logic into a Business class under MP\Business namespace.
namespace MP\Model\Mp;

use Bluefin\App;
use Bluefin\Convention;
use Bluefin\VarText;
use Bluefin\Data\Type;
use Bluefin\Data\Model;
use Bluefin\Data\Database;
use Bluefin\Data\ModelMetadata;
use Bluefin\Data\DbExpr;

class Directory extends Model
{
    const DIRECTORY_ID = 'directory_id';
    const _CREATED_AT = '_created_at';
    const MP_USER_ID = 'mp_user_id';
    const COMMUNITY_ID = 'community_id';
    const TOP_DIRECTORY_ID = 'top_directory_id';
    const TITLE = 'title';
    const ICON = 'icon';
    const SORT_NO = 'sort_no';
    const GROUP_END = 'group_end';
    const SHOW_SMALL_FLOW = 'show_small_flow';
    const COMMON_URL = 'common_url';
    const COMMON_CONTENT = 'common_content';
    const SMALL_FLOW_URL = 'small_flow_url';
    const SMALL_FLOW_CONTENT = 'small_flow_content';
    const SMALL_FLOW_NO = 'small_flow_no';
    const HEAD_DESC = 'head_desc';
    const TAIL_DESC = 'tail_desc';
    const COMMON_TYPE = 'common_type';
    const SMALL_FLOW_TYPE = 'small_flow_type';
    const POWER_TYPE = 'power_type';



    protected static $__metadata;

    /**
     * @static
     * @return \Bluefin\Data\ModelMetadata
     */
    public static function s_metadata()
    {
        if (!isset(self::$__metadata))
        {
            self::$__metadata = new ModelMetadata(
                'mp',
                'directory',
                'directory_id',
                [
                    'directory_id' => ['name' => _META_('mp.directory.directory_id'), 'type' => 'int', 'length' => 10, 'min' => 1, 'required' => true, 'db_insert' => true, 'rou' => true],
                    '_created_at' => ['name' => _META_('mp.directory._created_at'), 'type' => 'timestamp', 'required' => true, 'default' => new DbExpr('NOW()'), 'roc' => true, 'rou' => true],
                    'mp_user_id' => ['name' => _META_('mp.directory.mp_user_id'), 'type' => 'int', 'length' => 10, 'required' => true],
                    'community_id' => ['name' => _META_('mp.directory.community_id'), 'type' => 'int', 'length' => 10, 'required' => true],
                    'top_directory_id' => ['name' => _META_('mp.directory.top_directory_id'), 'type' => 'int', 'length' => 10, 'required' => true],
                    'title' => ['name' => _META_('mp.directory.title'), 'type' => 'text', 'length' => 128],
                    'icon' => ['name' => _META_('mp.directory.icon'), 'type' => 'url'],
                    'sort_no' => ['name' => _META_('mp.directory.sort_no'), 'type' => 'float', 'db_insert' => true, 'required' => true],
                    'group_end' => ['name' => _META_('mp.directory.group_end'), 'type' => 'bool', 'db_insert' => true, 'required' => true],
                    'show_small_flow' => ['name' => _META_('mp.directory.show_small_flow'), 'type' => 'bool', 'db_insert' => true, 'required' => true],
                    'common_url' => ['name' => _META_('mp.directory.common_url'), 'type' => 'url'],
                    'common_content' => ['name' => _META_('mp.directory.common_content'), 'type' => 'text'],
                    'small_flow_url' => ['name' => _META_('mp.directory.small_flow_url'), 'type' => 'url'],
                    'small_flow_content' => ['name' => _META_('mp.directory.small_flow_content'), 'type' => 'text'],
                    'small_flow_no' => ['name' => _META_('mp.directory.small_flow_no'), 'type' => 'text'],
                    'head_desc' => ['name' => _META_('mp.directory.head_desc'), 'type' => 'text', 'length' => 128],
                    'tail_desc' => ['name' => _META_('mp.directory.tail_desc'), 'type' => 'text'],
                    'common_type' => ['name' => _META_('mp.directory.common_type'), 'type' => 'text', 'max' => 32, 'required' => true, 'enum' => new DirectoryCommonType(), 'db_insert' => true],
                    'small_flow_type' => ['name' => _META_('mp.directory.small_flow_type'), 'type' => 'text', 'max' => 32, 'enum' => new DirectorySmallFlowType(), 'db_insert' => true],
                    'power_type' => ['name' => _META_('mp.directory.power_type'), 'type' => 'text', 'max' => 32, 'enum' => new DirectoryPowerType(), 'db_insert' => true],
                ],
                [
                    'auto_increment_id' => 'directory_id',
                    'create_timestamp' => '_created_at',
                ],
                [
                ],
                [
                ],
                [
                    Model::OP_CREATE => NULL,
                    Model::OP_GET => NULL,
                    Model::OP_UPDATE => NULL,
                    Model::OP_DELETE => NULL,
                ]
            );
        }

        return self::$__metadata;
    }

    public function __construct($condition = null)
    {
        parent::__construct(self::s_metadata());

        if (isset($condition))
        {
            $this->load($condition);
        }
        else
        {
            $this->reset();
        }
    }

    /**
     * Gets id
     * @return int
     */
    public function getDirectoryID()
    {
        return $this->__get(self::DIRECTORY_ID);
    }

    /**
     * Sets id
     * @param int $value
     * @return Directory
     */
    public function setDirectoryID($value)
    {
        $this->__set(self::DIRECTORY_ID, $value);

        return $this;
    }

    /**
     * Gets createdat
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->__get(self::_CREATED_AT);
    }

    /**
     * Sets createdat
     * @param string $value
     * @return Directory
     */
    public function setCreatedAt($value)
    {
        $this->__set(self::_CREATED_AT, $value);

        return $this;
    }

    /**
     * Gets 公众账号id
     * @return int
     */
    public function getMpUserID()
    {
        return $this->__get(self::MP_USER_ID);
    }

    /**
     * Sets 公众账号id
     * @param int $value
     * @return Directory
     */
    public function setMpUserID($value)
    {
        $this->__set(self::MP_USER_ID, $value);

        return $this;
    }

    /**
     * Gets community.community_id
     * @return int
     */
    public function getCommunityID()
    {
        return $this->__get(self::COMMUNITY_ID);
    }

    /**
     * Sets community.community_id
     * @param int $value
     * @return Directory
     */
    public function setCommunityID($value)
    {
        $this->__set(self::COMMUNITY_ID, $value);

        return $this;
    }

    /**
     * Gets 一级目录
     * @return int
     */
    public function getTopDirectoryID()
    {
        return $this->__get(self::TOP_DIRECTORY_ID);
    }

    /**
     * Sets 一级目录
     * @param int $value
     * @return Directory
     */
    public function setTopDirectoryID($value)
    {
        $this->__set(self::TOP_DIRECTORY_ID, $value);

        return $this;
    }

    /**
     * Gets 标题
     * @return string
     */
    public function getTitle()
    {
        return $this->__get(self::TITLE);
    }

    /**
     * Sets 标题
     * @param string $value
     * @return Directory
     */
    public function setTitle($value)
    {
        $this->__set(self::TITLE, $value);

        return $this;
    }

    /**
     * Gets 图标
     * @return string
     */
    public function getIcon()
    {
        return $this->__get(self::ICON);
    }

    /**
     * Sets 图标
     * @param string $value
     * @return Directory
     */
    public function setIcon($value)
    {
        $this->__set(self::ICON, $value);

        return $this;
    }

    /**
     * Gets 排序号
     * @return float
     */
    public function getSortNo()
    {
        return $this->__get(self::SORT_NO);
    }

    /**
     * Sets 排序号
     * @param float $value
     * @return Directory
     */
    public function setSortNo($value)
    {
        $this->__set(self::SORT_NO, $value);

        return $this;
    }

    /**
     * Gets 分组标志
     * @return bool
     */
    public function getGroupEnd()
    {
        return $this->__get(self::GROUP_END);
    }

    /**
     * Sets 分组标志
     * @param bool $value
     * @return Directory
     */
    public function setGroupEnd($value)
    {
        $this->__set(self::GROUP_END, $value);

        return $this;
    }

    /**
     * Gets 是否显示小流量
     * @return bool
     */
    public function getShowSmallFlow()
    {
        return $this->__get(self::SHOW_SMALL_FLOW);
    }

    /**
     * Sets 是否显示小流量
     * @param bool $value
     * @return Directory
     */
    public function setShowSmallFlow($value)
    {
        $this->__set(self::SHOW_SMALL_FLOW, $value);

        return $this;
    }

    /**
     * Gets 目录连接
     * @return string
     */
    public function getCommonUrl()
    {
        return $this->__get(self::COMMON_URL);
    }

    /**
     * Sets 目录连接
     * @param string $value
     * @return Directory
     */
    public function setCommonUrl($value)
    {
        $this->__set(self::COMMON_URL, $value);

        return $this;
    }

    /**
     * Gets 目录内容
     * @return string
     */
    public function getCommonContent()
    {
        return $this->__get(self::COMMON_CONTENT);
    }

    /**
     * Sets 目录内容
     * @param string $value
     * @return Directory
     */
    public function setCommonContent($value)
    {
        $this->__set(self::COMMON_CONTENT, $value);

        return $this;
    }

    /**
     * Gets 小流量目录连接
     * @return string
     */
    public function getSmallFlowUrl()
    {
        return $this->__get(self::SMALL_FLOW_URL);
    }

    /**
     * Sets 小流量目录连接
     * @param string $value
     * @return Directory
     */
    public function setSmallFlowUrl($value)
    {
        $this->__set(self::SMALL_FLOW_URL, $value);

        return $this;
    }

    /**
     * Gets 小流量目录内容
     * @return string
     */
    public function getSmallFlowContent()
    {
        return $this->__get(self::SMALL_FLOW_CONTENT);
    }

    /**
     * Sets 小流量目录内容
     * @param string $value
     * @return Directory
     */
    public function setSmallFlowContent($value)
    {
        $this->__set(self::SMALL_FLOW_CONTENT, $value);

        return $this;
    }

    /**
     * Gets 小流量用户房间编号
     * @return string
     */
    public function getSmallFlowNo()
    {
        return $this->__get(self::SMALL_FLOW_NO);
    }

    /**
     * Sets 小流量用户房间编号
     * @param string $value
     * @return Directory
     */
    public function setSmallFlowNo($value)
    {
        $this->__set(self::SMALL_FLOW_NO, $value);

        return $this;
    }

    /**
     * Gets 组头说明
     * @return string
     */
    public function getHeadDesc()
    {
        return $this->__get(self::HEAD_DESC);
    }

    /**
     * Sets 组头说明
     * @param string $value
     * @return Directory
     */
    public function setHeadDesc($value)
    {
        $this->__set(self::HEAD_DESC, $value);

        return $this;
    }

    /**
     * Gets 组尾说明
     * @return string
     */
    public function getTailDesc()
    {
        return $this->__get(self::TAIL_DESC);
    }

    /**
     * Sets 组尾说明
     * @param string $value
     * @return Directory
     */
    public function setTailDesc($value)
    {
        $this->__set(self::TAIL_DESC, $value);

        return $this;
    }

    /**
     * Gets 目录类型
     * @return string
     */
    public function getCommonType()
    {
        return $this->__get(self::COMMON_TYPE);
    }

    /**
     * Gets 目录类型 display name
     * @return string
     */
    public function getCommonType_EnumValue()
    {
        $option = $this->metadata()->getFilterOption('common_type');
        return $option['enum']::getDisplayName($this->__get(self::COMMON_TYPE));
    }

    /**
     * Sets 目录类型
     * @param string $value
     * @return Directory
     */
    public function setCommonType($value)
    {
        $this->__set(self::COMMON_TYPE, $value);

        return $this;
    }

    /**
     * Gets 小流量目录类型
     * @return string
     */
    public function getSmallFlowType()
    {
        return $this->__get(self::SMALL_FLOW_TYPE);
    }

    /**
     * Gets 小流量目录类型 display name
     * @return string
     */
    public function getSmallFlowType_EnumValue()
    {
        $option = $this->metadata()->getFilterOption('small_flow_type');
        return $option['enum']::getDisplayName($this->__get(self::SMALL_FLOW_TYPE));
    }

    /**
     * Sets 小流量目录类型
     * @param string $value
     * @return Directory
     */
    public function setSmallFlowType($value)
    {
        $this->__set(self::SMALL_FLOW_TYPE, $value);

        return $this;
    }

    /**
     * Gets  目录权限判断
     * @return string
     */
    public function getPowerType()
    {
        return $this->__get(self::POWER_TYPE);
    }

    /**
     * Gets  目录权限判断 display name
     * @return string
     */
    public function getPowerType_EnumValue()
    {
        $option = $this->metadata()->getFilterOption('power_type');
        return $option['enum']::getDisplayName($this->__get(self::POWER_TYPE));
    }

    /**
     * Sets  目录权限判断
     * @param string $value
     * @return Directory
     */
    public function setPowerType($value)
    {
        $this->__set(self::POWER_TYPE, $value);

        return $this;
    }
}
?>